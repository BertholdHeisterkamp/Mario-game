#!/bin/python3
import numpy as np
from numpy import random
import math


r = random.randint(2)
#Erstellen des Spielfeldes als zweidimensionales Array
row1 = np.array(['-','-','-'], dtype='S')
row2 = np.array(['-','-','-'], dtype='S')
row3 = np.array(['-','-','-'], dtype='S')
field = np.array([row1,row2,row3])
fieldbare = field.reshape(-1)
fieldcolumn = np.stack((row1, row2, row3), axis = 1)

#Methode zur Überprüfung, ob das ausgewählte Feld bespielbar ist
def check(row, number):
    if field[row - 1, number - 1].decode('utf-8') == '-':
        return True
    else:
        return False

#Methode, damit der Computer Drohungen erkennt
def emercheck(row, number):
    if field[row - 1, number - 1].decode('utf-8') == 'X':
        return True
    else:
        return False
#Methode, damit der Computer ohne Drohungen zurecht kommt
def emercheckbare(number):
    if fieldbare[number - 1].decode() == 'X':
        return True
    else:
        return False
#Methode, die das Array entsprechend des Zuges verändert
def move(row, number):
    if field[row - 1, number - 1].decode('utf-8') == '-':
        field[row - 1, number - 1] = sign 
    else:
        print('Ungültiger Zug')
#Methode, um das Spiel zu beenden
def end(nr):
    if nr == 0:
        print("Der Spieler hat gewonnen")
        exit()
    elif nr == 1:
        print("Der Computer hat gewonnen")
        exit()
#Das eigentlich Spiel bestehend aus maximal 9 Spielzügen
for e in range(1, 10):
    #Erkennung, ob der Spieler die Mitte besetzt um den Spielstil entsprechend anzupassen
    if field[1,1].decode('utf-8') == 'X':
        defmode = True
    else:
        defmode = False
    print(field)
    f = (-1)**e
#Zug des Spielers
    if f == -1:
        sign = "X"
        print("Spieler 1 ist am Zug")
        row = int(input("Bitte Reihe angeben"))
        number = int(input("Bitte Zahl der Reihe angeben"))
#Zug des Computers
    else:
        sign = "O"
        print("Der Computer ist nun am Zug")
        for b in field:
            s = 0
            for a in b:
                if a.decode('utf-8') == 'O':
                    s = s + 1
                if a.decode('utf-8') == 'X':
                    s = s - 1
            if s == 2:
                end(1)
        for b in fieldcolumn:
            s = 0
            for a in b:
                if a.decode('utf-8') == 'O':
                    s = s + 1
                if a.decode('utf-8') == 'X':
                    s = s - 1
            if s == 2:
                end(1)
        s = 0
        for b in fieldbare[0:9:4]:
            if b.decode('utf-8') == 'O':
                s = s + 1
            if b.decode('utf-8') == 'X':
                s = s - 1
        if s == 2:
            end(1)
        s = 0
        for b in fieldbare[2:7:2]:
            if b.decode('utf-8') == 'O':
                s = s + 1
            if b.decode('utf-8') == 'X':
                s = s - 1
        if s == 2:
            end(1)

#Spielstil 1: Der Spieler hat die Mitte besetzt, es gilt entsprechend zu adaptieren
        if defmode:   
            if check(1, 1):
                row = 1
                number = 1
            elif row == 1 and number == 2:
                row = 3
                number = 2
            elif row == 1 and number == 3:
                row = 3
                number = 1
            elif row == 2 and number == 1:
                row = 2
                number = 3
            elif row == 2 and number == 3:
                row = 2
                number = 1
            elif row == 3 and number == 1:
                row = 1
                number = 3
            elif row == 3 and number == 2:
                row = 1
                number = 2
            elif row == 3 and number == 3:
                if emercheck(1, 3):
                    row = 2
                    number = 3
                elif emercheck(2, 3):
                    row = 1
                    number = 3
                elif emercheck(3, 1):
                    row = 3
                    number = 2
                elif emercheck(3, 2):
                    row = 3 
                    number = 1
                elif check(1, 3):
                    row = 1
                    number = 3
#Spielstil 2: Der Computer hat die Mitte besetzt, er muss nun anders verteidigen
        else:
            if check(2, 2):
                row = 2
                number = 2
            else:
                row1 = 0
                number1 = 0
                t = 0
                for a in field:
                    row1 = row1 + 1 
                    s = 0
                    for b in a:
                        if b.decode() == 'X':
                            s = s + 1
                        if b.decode() == 'O':
                            s = s - 1
                    if s == 2:
                        for number1 in range(1, 4):
                            if check(row1, number1):
                                row = row1
                                number = number1
                                t = 1
                                break
                for a in fieldcolumn:
                    number1 = number1 + 1 
                    s = 0
                    for b in a:
                        if b.decode() == 'X':
                            s = s + 1
                        if b.decode() == 'O':
                            s = s - 1
                    if s == 2:
                        for row1 in range(1, 4):
                            if check(row1, number1):
                                row = row1
                                number = number1
                                t = 1
                                break
                s = 0
                for a in fieldbare[0:9:4]:
                    if a.decode() == 'X':
                        s = s + 1
                    if a.decode() == 'O':
                        s = s - 1
                if s == 2:
                    for row1,number1 in range(1, 4):
                        if check(row1, number1):
                            row = row1
                            number = number1
                            t = 1
                            break
                s = 0
                for a in fieldbare[2:7:2]:
                    if a.decode() == 'X':
                        s = s + 1
                    if a.decode() == 'O':
                        s = s - 1
                if s == 2:
                    for row1,number1 in range(1, 4):
                        if check(row1, number1):
                            row = row1
                            number = number1
                            t = 1
                            break
                if t == 0:
                    for a in range(0, 9):
                        if emercheckbare(a):
                            b = a
                            row = math.ceil( b / 3 )
                            number = b % 3
                            if row < 3:
                                if check(row + 1, number):
                                    row = row + 1
                                elif number < 3:
                                    if check(row, number + 1):
                                        number = number + 1
                                else:
                                    if check(row, number - 1):
                                        number = number - 1
                            else:
                                if check(row - 1, number):
                                    row = row - 1
                                elif number < 3:
                                    if check(row, number + 1):
                                        number = number + 1
                                else:
                                    if check(row, number - 1):
                                        number = number - 1
    move(row, number)
    row1 = field[0]
    row2 = field[1]
    row3 = field[2]
#Ab hier wird überprüft, ob das Spiel zuende ist, das ein Spieler gewonnen hat
    fieldbare = field.reshape(-1)
    fieldcolumn = np.stack((row1, row2, row3), axis = 1)
    if ((row1==np.array(['X', 'X', 'X'], dtype='S')).all() 
            or (row2==np.array(['X', 'X', 'X'], dtype='S')).all() 
            or (row3==np.array(['X', 'X', 'X'], dtype='S')).all() 
            or (fieldcolumn[0]==np.array(['X', 'X', 'X'], dtype='S')).all() 
            or (fieldcolumn[1]==np.array(['X', 'X', 'X'], dtype='S')).all() 
            or (fieldcolumn[2]==np.array(['X', 'X', 'X'], dtype='S')).all() 
            or (fieldbare[0:9:4]==np.array(['X', 'X', 'X'], dtype='S')).all() 
            or (fieldbare[2:7:2]==np.array(['X', 'X', 'X'], dtype='S')).all()):
        end(0)
    if ((row1==np.array(['O', 'O', 'O'], dtype='S')).all() 
            or (row2==np.array(['O', 'O', 'O'], dtype='S')).all() 
            or (row3==np.array(['O', 'O', 'O'], dtype='S')).all() 
            or (fieldcolumn[0]==np.array(['O', 'O', 'O'], dtype='S')).all() 
            or (fieldcolumn[1]==np.array(['O', 'O', 'O'], dtype='S')).all() 
            or (fieldcolumn[2]==np.array(['O', 'O', 'O'], dtype='S')).all() 
            or (fieldbare[0:9:4]==np.array(['O', 'O', 'O'], dtype='S')).all() 
            or (fieldbare[2:7:2]==np.array(['O', 'O', 'O'], dtype='S')).all()):
        end(1)

print("Spiel beendet")


